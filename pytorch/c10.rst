
C10
===

visibility
----------

For gcc, it is ``--fvisibility=hidden`` or ``-fvisibility=default``.

.. code-block::

  #if defined(__GNUC__)
    #define C10_EXPORT __attribute__((__visibility__("default")))
    #define C10_HIDDEN __attribute__((__visibility__("hidden")))
  #else // defined(__GNUC__)
    #define C10_EXPORT
    #define C10_HIDDEN
  #endif // defined(__GNUC__)

  #define C10_IMPORT C10_EXPORT

  #ifdef C10_BUILD_MAIN_LIB
    #define C10_API C10_EXPORT
  #else
    #define C10_API C10_IMPORT
  #endif

.. code-block::

  class C10_API MessageLogger { ... };

  struct C10_API TensorImpl : public c10::intrusive_ptr_target { ... };

  struct C10_API Device final { ... };

  C10_API const char* toString(DispatchKey);

  #define TORCH_WARN_ONCE(...) \
    C10_UNUSED static const auto C10_ANONYMOUS_VARIABLE(torch_warn_once_) = [&] { \
      ::c10::Warning::warn({__func__, __FILE__, static_cast<uint32_t>(__LINE__)}, ::c10::str(__VA_ARGS__)); \
      return true; \
    }()

Useful macros
-------------

``c10/macros/Macros.h``

.. code-block::

  #define C10_DISABLE_COPY_AND_ASSIGN(classname) \
    classname(const classname&) = delete;        \
    classname& operator=(const classname&) = delete

  #define C10_CONCATENATE_IMPL(s1, s2) s1##s2
  #define C10_CONCATENATE(s1, s2) C10_CONCATENATE_IMPL(s1, s2)

  #define C10_MACRO_EXPAND(args) args

  #ifdef __COUNTER__
    #define C10_ANONYMOUS_VARIABLE(str) C10_CONCATENATE(str, __COUNTER__)
  #else
    #define C10_ANONYMOUS_VARIABLE(str) C10_CONCATENATE(str, __LINE__)
  #endif

  #if defined(__GNUC__) || defined(__ICL) || defined(__clang__)
    #define C10_LIKELY(expr)    (__builtin_expect(static_cast<bool>(expr), 1))
    #define C10_UNLIKELY(expr)  (__builtin_expect(static_cast<bool>(expr), 0))
  #else
    #define C10_LIKELY(expr)    (expr)
    #define C10_UNLIKELY(expr)  (expr)
  #endif


